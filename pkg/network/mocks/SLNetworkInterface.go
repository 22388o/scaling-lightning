// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	network "github.com/scaling-lightning/scaling-lightning/pkg/network"
	mock "github.com/stretchr/testify/mock"
)

// SLNetworkInterface is an autogenerated mock type for the SLNetworkInterface type
type SLNetworkInterface struct {
	mock.Mock
}

// GetAllNodes provides a mock function with given fields:
func (_m *SLNetworkInterface) GetAllNodes() []network.Node {
	ret := _m.Called()

	var r0 []network.Node
	if rf, ok := ret.Get(0).(func() []network.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.Node)
		}
	}

	return r0
}

// GetBitcoinNode provides a mock function with given fields: name
func (_m *SLNetworkInterface) GetBitcoinNode(name string) (*network.BitcoinNode, error) {
	ret := _m.Called(name)

	var r0 *network.BitcoinNode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*network.BitcoinNode, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *network.BitcoinNode); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.BitcoinNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLightningNode provides a mock function with given fields: name
func (_m *SLNetworkInterface) GetLightningNode(name string) (*network.LightningNode, error) {
	ret := _m.Called(name)

	var r0 *network.LightningNode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*network.LightningNode, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *network.LightningNode); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.LightningNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: name
func (_m *SLNetworkInterface) GetNode(name string) (network.Node, error) {
	ret := _m.Called(name)

	var r0 network.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (network.Node, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) network.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *SLNetworkInterface) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *SLNetworkInterface) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSLNetworkInterface creates a new instance of SLNetworkInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSLNetworkInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SLNetworkInterface {
	mock := &SLNetworkInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
