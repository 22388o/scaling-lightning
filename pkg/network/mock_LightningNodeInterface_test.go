// Code generated by mockery v2.34.2. DO NOT EDIT.

package network

import (
	common "github.com/scaling-lightning/scaling-lightning/pkg/standardclient/common"
	lightning "github.com/scaling-lightning/scaling-lightning/pkg/standardclient/lightning"

	lightningnode "github.com/scaling-lightning/scaling-lightning/pkg/lightningnode"

	mock "github.com/stretchr/testify/mock"

	types "github.com/scaling-lightning/scaling-lightning/pkg/types"
)

// MockLightningNodeInterface is an autogenerated mock type for the LightningNodeInterface type
type MockLightningNodeInterface struct {
	mock.Mock
}

type MockLightningNodeInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLightningNodeInterface) EXPECT() *MockLightningNodeInterface_Expecter {
	return &MockLightningNodeInterface_Expecter{mock: &_m.Mock}
}

// ChannelBalance provides a mock function with given fields: client
func (_m *MockLightningNodeInterface) ChannelBalance(client lightning.LightningClient) (types.Amount, error) {
	ret := _m.Called(client)

	var r0 types.Amount
	var r1 error
	if rf, ok := ret.Get(0).(func(lightning.LightningClient) (types.Amount, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(lightning.LightningClient) types.Amount); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(types.Amount)
	}

	if rf, ok := ret.Get(1).(func(lightning.LightningClient) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_ChannelBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelBalance'
type MockLightningNodeInterface_ChannelBalance_Call struct {
	*mock.Call
}

// ChannelBalance is a helper method to define mock.On call
//   - client lightning.LightningClient
func (_e *MockLightningNodeInterface_Expecter) ChannelBalance(client interface{}) *MockLightningNodeInterface_ChannelBalance_Call {
	return &MockLightningNodeInterface_ChannelBalance_Call{Call: _e.mock.On("ChannelBalance", client)}
}

func (_c *MockLightningNodeInterface_ChannelBalance_Call) Run(run func(client lightning.LightningClient)) *MockLightningNodeInterface_ChannelBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lightning.LightningClient))
	})
	return _c
}

func (_c *MockLightningNodeInterface_ChannelBalance_Call) Return(_a0 types.Amount, _a1 error) *MockLightningNodeInterface_ChannelBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_ChannelBalance_Call) RunAndReturn(run func(lightning.LightningClient) (types.Amount, error)) *MockLightningNodeInterface_ChannelBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectPeer provides a mock function with given fields: client, pubkey, nodeName
func (_m *MockLightningNodeInterface) ConnectPeer(client lightning.LightningClient, pubkey types.PubKey, nodeName string) error {
	ret := _m.Called(client, pubkey, nodeName)

	var r0 error
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, types.PubKey, string) error); ok {
		r0 = rf(client, pubkey, nodeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLightningNodeInterface_ConnectPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectPeer'
type MockLightningNodeInterface_ConnectPeer_Call struct {
	*mock.Call
}

// ConnectPeer is a helper method to define mock.On call
//   - client lightning.LightningClient
//   - pubkey types.PubKey
//   - nodeName string
func (_e *MockLightningNodeInterface_Expecter) ConnectPeer(client interface{}, pubkey interface{}, nodeName interface{}) *MockLightningNodeInterface_ConnectPeer_Call {
	return &MockLightningNodeInterface_ConnectPeer_Call{Call: _e.mock.On("ConnectPeer", client, pubkey, nodeName)}
}

func (_c *MockLightningNodeInterface_ConnectPeer_Call) Run(run func(client lightning.LightningClient, pubkey types.PubKey, nodeName string)) *MockLightningNodeInterface_ConnectPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lightning.LightningClient), args[1].(types.PubKey), args[2].(string))
	})
	return _c
}

func (_c *MockLightningNodeInterface_ConnectPeer_Call) Return(_a0 error) *MockLightningNodeInterface_ConnectPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLightningNodeInterface_ConnectPeer_Call) RunAndReturn(run func(lightning.LightningClient, types.PubKey, string) error) *MockLightningNodeInterface_ConnectPeer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInvoice provides a mock function with given fields: client, amountSats
func (_m *MockLightningNodeInterface) CreateInvoice(client lightning.LightningClient, amountSats uint64) (string, error) {
	ret := _m.Called(client, amountSats)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, uint64) (string, error)); ok {
		return rf(client, amountSats)
	}
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, uint64) string); ok {
		r0 = rf(client, amountSats)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(lightning.LightningClient, uint64) error); ok {
		r1 = rf(client, amountSats)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_CreateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvoice'
type MockLightningNodeInterface_CreateInvoice_Call struct {
	*mock.Call
}

// CreateInvoice is a helper method to define mock.On call
//   - client lightning.LightningClient
//   - amountSats uint64
func (_e *MockLightningNodeInterface_Expecter) CreateInvoice(client interface{}, amountSats interface{}) *MockLightningNodeInterface_CreateInvoice_Call {
	return &MockLightningNodeInterface_CreateInvoice_Call{Call: _e.mock.On("CreateInvoice", client, amountSats)}
}

func (_c *MockLightningNodeInterface_CreateInvoice_Call) Run(run func(client lightning.LightningClient, amountSats uint64)) *MockLightningNodeInterface_CreateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lightning.LightningClient), args[1].(uint64))
	})
	return _c
}

func (_c *MockLightningNodeInterface_CreateInvoice_Call) Return(_a0 string, _a1 error) *MockLightningNodeInterface_CreateInvoice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_CreateInvoice_Call) RunAndReturn(run func(lightning.LightningClient, uint64) (string, error)) *MockLightningNodeInterface_CreateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionFiles provides a mock function with given fields: network, kubeConfig
func (_m *MockLightningNodeInterface) GetConnectionFiles(network string, kubeConfig string) (*lightningnode.ConnectionFiles, error) {
	ret := _m.Called(network, kubeConfig)

	var r0 *lightningnode.ConnectionFiles
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*lightningnode.ConnectionFiles, error)); ok {
		return rf(network, kubeConfig)
	}
	if rf, ok := ret.Get(0).(func(string, string) *lightningnode.ConnectionFiles); ok {
		r0 = rf(network, kubeConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightningnode.ConnectionFiles)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(network, kubeConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_GetConnectionFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionFiles'
type MockLightningNodeInterface_GetConnectionFiles_Call struct {
	*mock.Call
}

// GetConnectionFiles is a helper method to define mock.On call
//   - network string
//   - kubeConfig string
func (_e *MockLightningNodeInterface_Expecter) GetConnectionFiles(network interface{}, kubeConfig interface{}) *MockLightningNodeInterface_GetConnectionFiles_Call {
	return &MockLightningNodeInterface_GetConnectionFiles_Call{Call: _e.mock.On("GetConnectionFiles", network, kubeConfig)}
}

func (_c *MockLightningNodeInterface_GetConnectionFiles_Call) Run(run func(network string, kubeConfig string)) *MockLightningNodeInterface_GetConnectionFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockLightningNodeInterface_GetConnectionFiles_Call) Return(_a0 *lightningnode.ConnectionFiles, _a1 error) *MockLightningNodeInterface_GetConnectionFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_GetConnectionFiles_Call) RunAndReturn(run func(string, string) (*lightningnode.ConnectionFiles, error)) *MockLightningNodeInterface_GetConnectionFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionPort provides a mock function with given fields: kubeConfig
func (_m *MockLightningNodeInterface) GetConnectionPort(kubeConfig string) (uint16, error) {
	ret := _m.Called(kubeConfig)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint16, error)); ok {
		return rf(kubeConfig)
	}
	if rf, ok := ret.Get(0).(func(string) uint16); ok {
		r0 = rf(kubeConfig)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(kubeConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_GetConnectionPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionPort'
type MockLightningNodeInterface_GetConnectionPort_Call struct {
	*mock.Call
}

// GetConnectionPort is a helper method to define mock.On call
//   - kubeConfig string
func (_e *MockLightningNodeInterface_Expecter) GetConnectionPort(kubeConfig interface{}) *MockLightningNodeInterface_GetConnectionPort_Call {
	return &MockLightningNodeInterface_GetConnectionPort_Call{Call: _e.mock.On("GetConnectionPort", kubeConfig)}
}

func (_c *MockLightningNodeInterface_GetConnectionPort_Call) Run(run func(kubeConfig string)) *MockLightningNodeInterface_GetConnectionPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLightningNodeInterface_GetConnectionPort_Call) Return(_a0 uint16, _a1 error) *MockLightningNodeInterface_GetConnectionPort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_GetConnectionPort_Call) RunAndReturn(run func(string) (uint16, error)) *MockLightningNodeInterface_GetConnectionPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockLightningNodeInterface) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLightningNodeInterface_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockLightningNodeInterface_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockLightningNodeInterface_Expecter) GetName() *MockLightningNodeInterface_GetName_Call {
	return &MockLightningNodeInterface_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockLightningNodeInterface_GetName_Call) Run(run func()) *MockLightningNodeInterface_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLightningNodeInterface_GetName_Call) Return(_a0 string) *MockLightningNodeInterface_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLightningNodeInterface_GetName_Call) RunAndReturn(run func() string) *MockLightningNodeInterface_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAddress provides a mock function with given fields: client
func (_m *MockLightningNodeInterface) GetNewAddress(client common.CommonClient) (string, error) {
	ret := _m.Called(client)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(common.CommonClient) (string, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(common.CommonClient) string); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(common.CommonClient) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_GetNewAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAddress'
type MockLightningNodeInterface_GetNewAddress_Call struct {
	*mock.Call
}

// GetNewAddress is a helper method to define mock.On call
//   - client common.CommonClient
func (_e *MockLightningNodeInterface_Expecter) GetNewAddress(client interface{}) *MockLightningNodeInterface_GetNewAddress_Call {
	return &MockLightningNodeInterface_GetNewAddress_Call{Call: _e.mock.On("GetNewAddress", client)}
}

func (_c *MockLightningNodeInterface_GetNewAddress_Call) Run(run func(client common.CommonClient)) *MockLightningNodeInterface_GetNewAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.CommonClient))
	})
	return _c
}

func (_c *MockLightningNodeInterface_GetNewAddress_Call) Return(_a0 string, _a1 error) *MockLightningNodeInterface_GetNewAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_GetNewAddress_Call) RunAndReturn(run func(common.CommonClient) (string, error)) *MockLightningNodeInterface_GetNewAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetPubKey provides a mock function with given fields: client
func (_m *MockLightningNodeInterface) GetPubKey(client lightning.LightningClient) (types.PubKey, error) {
	ret := _m.Called(client)

	var r0 types.PubKey
	var r1 error
	if rf, ok := ret.Get(0).(func(lightning.LightningClient) (types.PubKey, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(lightning.LightningClient) types.PubKey); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(types.PubKey)
	}

	if rf, ok := ret.Get(1).(func(lightning.LightningClient) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_GetPubKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPubKey'
type MockLightningNodeInterface_GetPubKey_Call struct {
	*mock.Call
}

// GetPubKey is a helper method to define mock.On call
//   - client lightning.LightningClient
func (_e *MockLightningNodeInterface_Expecter) GetPubKey(client interface{}) *MockLightningNodeInterface_GetPubKey_Call {
	return &MockLightningNodeInterface_GetPubKey_Call{Call: _e.mock.On("GetPubKey", client)}
}

func (_c *MockLightningNodeInterface_GetPubKey_Call) Run(run func(client lightning.LightningClient)) *MockLightningNodeInterface_GetPubKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lightning.LightningClient))
	})
	return _c
}

func (_c *MockLightningNodeInterface_GetPubKey_Call) Return(_a0 types.PubKey, _a1 error) *MockLightningNodeInterface_GetPubKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_GetPubKey_Call) RunAndReturn(run func(lightning.LightningClient) (types.PubKey, error)) *MockLightningNodeInterface_GetPubKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletBalance provides a mock function with given fields: client
func (_m *MockLightningNodeInterface) GetWalletBalance(client common.CommonClient) (types.Amount, error) {
	ret := _m.Called(client)

	var r0 types.Amount
	var r1 error
	if rf, ok := ret.Get(0).(func(common.CommonClient) (types.Amount, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(common.CommonClient) types.Amount); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(types.Amount)
	}

	if rf, ok := ret.Get(1).(func(common.CommonClient) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_GetWalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletBalance'
type MockLightningNodeInterface_GetWalletBalance_Call struct {
	*mock.Call
}

// GetWalletBalance is a helper method to define mock.On call
//   - client common.CommonClient
func (_e *MockLightningNodeInterface_Expecter) GetWalletBalance(client interface{}) *MockLightningNodeInterface_GetWalletBalance_Call {
	return &MockLightningNodeInterface_GetWalletBalance_Call{Call: _e.mock.On("GetWalletBalance", client)}
}

func (_c *MockLightningNodeInterface_GetWalletBalance_Call) Run(run func(client common.CommonClient)) *MockLightningNodeInterface_GetWalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.CommonClient))
	})
	return _c
}

func (_c *MockLightningNodeInterface_GetWalletBalance_Call) Return(_a0 types.Amount, _a1 error) *MockLightningNodeInterface_GetWalletBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_GetWalletBalance_Call) RunAndReturn(run func(common.CommonClient) (types.Amount, error)) *MockLightningNodeInterface_GetWalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// OpenChannel provides a mock function with given fields: client, pubkey, localAmt
func (_m *MockLightningNodeInterface) OpenChannel(client lightning.LightningClient, pubkey types.PubKey, localAmt types.Amount) (types.ChannelPoint, error) {
	ret := _m.Called(client, pubkey, localAmt)

	var r0 types.ChannelPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, types.PubKey, types.Amount) (types.ChannelPoint, error)); ok {
		return rf(client, pubkey, localAmt)
	}
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, types.PubKey, types.Amount) types.ChannelPoint); ok {
		r0 = rf(client, pubkey, localAmt)
	} else {
		r0 = ret.Get(0).(types.ChannelPoint)
	}

	if rf, ok := ret.Get(1).(func(lightning.LightningClient, types.PubKey, types.Amount) error); ok {
		r1 = rf(client, pubkey, localAmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_OpenChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenChannel'
type MockLightningNodeInterface_OpenChannel_Call struct {
	*mock.Call
}

// OpenChannel is a helper method to define mock.On call
//   - client lightning.LightningClient
//   - pubkey types.PubKey
//   - localAmt types.Amount
func (_e *MockLightningNodeInterface_Expecter) OpenChannel(client interface{}, pubkey interface{}, localAmt interface{}) *MockLightningNodeInterface_OpenChannel_Call {
	return &MockLightningNodeInterface_OpenChannel_Call{Call: _e.mock.On("OpenChannel", client, pubkey, localAmt)}
}

func (_c *MockLightningNodeInterface_OpenChannel_Call) Run(run func(client lightning.LightningClient, pubkey types.PubKey, localAmt types.Amount)) *MockLightningNodeInterface_OpenChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lightning.LightningClient), args[1].(types.PubKey), args[2].(types.Amount))
	})
	return _c
}

func (_c *MockLightningNodeInterface_OpenChannel_Call) Return(_a0 types.ChannelPoint, _a1 error) *MockLightningNodeInterface_OpenChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_OpenChannel_Call) RunAndReturn(run func(lightning.LightningClient, types.PubKey, types.Amount) (types.ChannelPoint, error)) *MockLightningNodeInterface_OpenChannel_Call {
	_c.Call.Return(run)
	return _c
}

// PayInvoice provides a mock function with given fields: client, invoice
func (_m *MockLightningNodeInterface) PayInvoice(client lightning.LightningClient, invoice string) (string, error) {
	ret := _m.Called(client, invoice)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, string) (string, error)); ok {
		return rf(client, invoice)
	}
	if rf, ok := ret.Get(0).(func(lightning.LightningClient, string) string); ok {
		r0 = rf(client, invoice)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(lightning.LightningClient, string) error); ok {
		r1 = rf(client, invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_PayInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayInvoice'
type MockLightningNodeInterface_PayInvoice_Call struct {
	*mock.Call
}

// PayInvoice is a helper method to define mock.On call
//   - client lightning.LightningClient
//   - invoice string
func (_e *MockLightningNodeInterface_Expecter) PayInvoice(client interface{}, invoice interface{}) *MockLightningNodeInterface_PayInvoice_Call {
	return &MockLightningNodeInterface_PayInvoice_Call{Call: _e.mock.On("PayInvoice", client, invoice)}
}

func (_c *MockLightningNodeInterface_PayInvoice_Call) Run(run func(client lightning.LightningClient, invoice string)) *MockLightningNodeInterface_PayInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lightning.LightningClient), args[1].(string))
	})
	return _c
}

func (_c *MockLightningNodeInterface_PayInvoice_Call) Return(_a0 string, _a1 error) *MockLightningNodeInterface_PayInvoice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_PayInvoice_Call) RunAndReturn(run func(lightning.LightningClient, string) (string, error)) *MockLightningNodeInterface_PayInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// SendToAddress provides a mock function with given fields: client, address, amount
func (_m *MockLightningNodeInterface) SendToAddress(client common.CommonClient, address string, amount types.Amount) (string, error) {
	ret := _m.Called(client, address, amount)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(common.CommonClient, string, types.Amount) (string, error)); ok {
		return rf(client, address, amount)
	}
	if rf, ok := ret.Get(0).(func(common.CommonClient, string, types.Amount) string); ok {
		r0 = rf(client, address, amount)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(common.CommonClient, string, types.Amount) error); ok {
		r1 = rf(client, address, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningNodeInterface_SendToAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToAddress'
type MockLightningNodeInterface_SendToAddress_Call struct {
	*mock.Call
}

// SendToAddress is a helper method to define mock.On call
//   - client common.CommonClient
//   - address string
//   - amount types.Amount
func (_e *MockLightningNodeInterface_Expecter) SendToAddress(client interface{}, address interface{}, amount interface{}) *MockLightningNodeInterface_SendToAddress_Call {
	return &MockLightningNodeInterface_SendToAddress_Call{Call: _e.mock.On("SendToAddress", client, address, amount)}
}

func (_c *MockLightningNodeInterface_SendToAddress_Call) Run(run func(client common.CommonClient, address string, amount types.Amount)) *MockLightningNodeInterface_SendToAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.CommonClient), args[1].(string), args[2].(types.Amount))
	})
	return _c
}

func (_c *MockLightningNodeInterface_SendToAddress_Call) Return(_a0 string, _a1 error) *MockLightningNodeInterface_SendToAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningNodeInterface_SendToAddress_Call) RunAndReturn(run func(common.CommonClient, string, types.Amount) (string, error)) *MockLightningNodeInterface_SendToAddress_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAuthFilesToDirectory provides a mock function with given fields: network, kubeConfig, dir
func (_m *MockLightningNodeInterface) WriteAuthFilesToDirectory(network string, kubeConfig string, dir string) error {
	ret := _m.Called(network, kubeConfig, dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(network, kubeConfig, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLightningNodeInterface_WriteAuthFilesToDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAuthFilesToDirectory'
type MockLightningNodeInterface_WriteAuthFilesToDirectory_Call struct {
	*mock.Call
}

// WriteAuthFilesToDirectory is a helper method to define mock.On call
//   - network string
//   - kubeConfig string
//   - dir string
func (_e *MockLightningNodeInterface_Expecter) WriteAuthFilesToDirectory(network interface{}, kubeConfig interface{}, dir interface{}) *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call {
	return &MockLightningNodeInterface_WriteAuthFilesToDirectory_Call{Call: _e.mock.On("WriteAuthFilesToDirectory", network, kubeConfig, dir)}
}

func (_c *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call) Run(run func(network string, kubeConfig string, dir string)) *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call) Return(_a0 error) *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call) RunAndReturn(run func(string, string, string) error) *MockLightningNodeInterface_WriteAuthFilesToDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLightningNodeInterface creates a new instance of MockLightningNodeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLightningNodeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLightningNodeInterface {
	mock := &MockLightningNodeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
