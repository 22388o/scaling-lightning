// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: std_lightning_client.proto

package lightning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightningClientClient is the client API for LightningClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightningClientClient interface {
	WalletBalance(ctx context.Context, in *WalletBalanceRequest, opts ...grpc.CallOption) (*WalletBalanceResponse, error)
	NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error)
}

type lightningClientClient struct {
	cc grpc.ClientConnInterface
}

func NewLightningClientClient(cc grpc.ClientConnInterface) LightningClientClient {
	return &lightningClientClient{cc}
}

func (c *lightningClientClient) WalletBalance(ctx context.Context, in *WalletBalanceRequest, opts ...grpc.CallOption) (*WalletBalanceResponse, error) {
	out := new(WalletBalanceResponse)
	err := c.cc.Invoke(ctx, "/lightning.LightningClient/WalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightningClientClient) NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error) {
	out := new(NewAddressResponse)
	err := c.cc.Invoke(ctx, "/lightning.LightningClient/NewAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightningClientServer is the server API for LightningClient service.
// All implementations must embed UnimplementedLightningClientServer
// for forward compatibility
type LightningClientServer interface {
	WalletBalance(context.Context, *WalletBalanceRequest) (*WalletBalanceResponse, error)
	NewAddress(context.Context, *NewAddressRequest) (*NewAddressResponse, error)
	mustEmbedUnimplementedLightningClientServer()
}

// UnimplementedLightningClientServer must be embedded to have forward compatible implementations.
type UnimplementedLightningClientServer struct {
}

func (UnimplementedLightningClientServer) WalletBalance(context.Context, *WalletBalanceRequest) (*WalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletBalance not implemented")
}
func (UnimplementedLightningClientServer) NewAddress(context.Context, *NewAddressRequest) (*NewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAddress not implemented")
}
func (UnimplementedLightningClientServer) mustEmbedUnimplementedLightningClientServer() {}

// UnsafeLightningClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightningClientServer will
// result in compilation errors.
type UnsafeLightningClientServer interface {
	mustEmbedUnimplementedLightningClientServer()
}

func RegisterLightningClientServer(s grpc.ServiceRegistrar, srv LightningClientServer) {
	s.RegisterService(&LightningClient_ServiceDesc, srv)
}

func _LightningClient_WalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightningClientServer).WalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightning.LightningClient/WalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightningClientServer).WalletBalance(ctx, req.(*WalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightningClient_NewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightningClientServer).NewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightning.LightningClient/NewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightningClientServer).NewAddress(ctx, req.(*NewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LightningClient_ServiceDesc is the grpc.ServiceDesc for LightningClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightningClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightning.LightningClient",
	HandlerType: (*LightningClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WalletBalance",
			Handler:    _LightningClient_WalletBalance_Handler,
		},
		{
			MethodName: "NewAddress",
			Handler:    _LightningClient_NewAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "std_lightning_client.proto",
}
