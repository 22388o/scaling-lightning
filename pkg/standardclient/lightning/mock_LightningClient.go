// Code generated by mockery v2.34.2. DO NOT EDIT.

package lightning

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockLightningClient is an autogenerated mock type for the LightningClient type
type MockLightningClient struct {
	mock.Mock
}

type MockLightningClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLightningClient) EXPECT() *MockLightningClient_Expecter {
	return &MockLightningClient_Expecter{mock: &_m.Mock}
}

// ChannelBalance provides a mock function with given fields: ctx, in, opts
func (_m *MockLightningClient) ChannelBalance(ctx context.Context, in *ChannelBalanceRequest, opts ...grpc.CallOption) (*ChannelBalanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ChannelBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ChannelBalanceRequest, ...grpc.CallOption) (*ChannelBalanceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ChannelBalanceRequest, ...grpc.CallOption) *ChannelBalanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChannelBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ChannelBalanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningClient_ChannelBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelBalance'
type MockLightningClient_ChannelBalance_Call struct {
	*mock.Call
}

// ChannelBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ChannelBalanceRequest
//   - opts ...grpc.CallOption
func (_e *MockLightningClient_Expecter) ChannelBalance(ctx interface{}, in interface{}, opts ...interface{}) *MockLightningClient_ChannelBalance_Call {
	return &MockLightningClient_ChannelBalance_Call{Call: _e.mock.On("ChannelBalance",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLightningClient_ChannelBalance_Call) Run(run func(ctx context.Context, in *ChannelBalanceRequest, opts ...grpc.CallOption)) *MockLightningClient_ChannelBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ChannelBalanceRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLightningClient_ChannelBalance_Call) Return(_a0 *ChannelBalanceResponse, _a1 error) *MockLightningClient_ChannelBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningClient_ChannelBalance_Call) RunAndReturn(run func(context.Context, *ChannelBalanceRequest, ...grpc.CallOption) (*ChannelBalanceResponse, error)) *MockLightningClient_ChannelBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectPeer provides a mock function with given fields: ctx, in, opts
func (_m *MockLightningClient) ConnectPeer(ctx context.Context, in *ConnectPeerRequest, opts ...grpc.CallOption) (*ConnectPeerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ConnectPeerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ConnectPeerRequest, ...grpc.CallOption) (*ConnectPeerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ConnectPeerRequest, ...grpc.CallOption) *ConnectPeerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConnectPeerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ConnectPeerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningClient_ConnectPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectPeer'
type MockLightningClient_ConnectPeer_Call struct {
	*mock.Call
}

// ConnectPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ConnectPeerRequest
//   - opts ...grpc.CallOption
func (_e *MockLightningClient_Expecter) ConnectPeer(ctx interface{}, in interface{}, opts ...interface{}) *MockLightningClient_ConnectPeer_Call {
	return &MockLightningClient_ConnectPeer_Call{Call: _e.mock.On("ConnectPeer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLightningClient_ConnectPeer_Call) Run(run func(ctx context.Context, in *ConnectPeerRequest, opts ...grpc.CallOption)) *MockLightningClient_ConnectPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ConnectPeerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLightningClient_ConnectPeer_Call) Return(_a0 *ConnectPeerResponse, _a1 error) *MockLightningClient_ConnectPeer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningClient_ConnectPeer_Call) RunAndReturn(run func(context.Context, *ConnectPeerRequest, ...grpc.CallOption) (*ConnectPeerResponse, error)) *MockLightningClient_ConnectPeer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInvoice provides a mock function with given fields: ctx, in, opts
func (_m *MockLightningClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateInvoiceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateInvoiceRequest, ...grpc.CallOption) (*CreateInvoiceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateInvoiceRequest, ...grpc.CallOption) *CreateInvoiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateInvoiceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateInvoiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningClient_CreateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvoice'
type MockLightningClient_CreateInvoice_Call struct {
	*mock.Call
}

// CreateInvoice is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreateInvoiceRequest
//   - opts ...grpc.CallOption
func (_e *MockLightningClient_Expecter) CreateInvoice(ctx interface{}, in interface{}, opts ...interface{}) *MockLightningClient_CreateInvoice_Call {
	return &MockLightningClient_CreateInvoice_Call{Call: _e.mock.On("CreateInvoice",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLightningClient_CreateInvoice_Call) Run(run func(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption)) *MockLightningClient_CreateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateInvoiceRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLightningClient_CreateInvoice_Call) Return(_a0 *CreateInvoiceResponse, _a1 error) *MockLightningClient_CreateInvoice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningClient_CreateInvoice_Call) RunAndReturn(run func(context.Context, *CreateInvoiceRequest, ...grpc.CallOption) (*CreateInvoiceResponse, error)) *MockLightningClient_CreateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// OpenChannel provides a mock function with given fields: ctx, in, opts
func (_m *MockLightningClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *OpenChannelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *OpenChannelRequest, ...grpc.CallOption) (*OpenChannelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *OpenChannelRequest, ...grpc.CallOption) *OpenChannelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OpenChannelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *OpenChannelRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningClient_OpenChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenChannel'
type MockLightningClient_OpenChannel_Call struct {
	*mock.Call
}

// OpenChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - in *OpenChannelRequest
//   - opts ...grpc.CallOption
func (_e *MockLightningClient_Expecter) OpenChannel(ctx interface{}, in interface{}, opts ...interface{}) *MockLightningClient_OpenChannel_Call {
	return &MockLightningClient_OpenChannel_Call{Call: _e.mock.On("OpenChannel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLightningClient_OpenChannel_Call) Run(run func(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption)) *MockLightningClient_OpenChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*OpenChannelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLightningClient_OpenChannel_Call) Return(_a0 *OpenChannelResponse, _a1 error) *MockLightningClient_OpenChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningClient_OpenChannel_Call) RunAndReturn(run func(context.Context, *OpenChannelRequest, ...grpc.CallOption) (*OpenChannelResponse, error)) *MockLightningClient_OpenChannel_Call {
	_c.Call.Return(run)
	return _c
}

// PayInvoice provides a mock function with given fields: ctx, in, opts
func (_m *MockLightningClient) PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *PayInvoiceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PayInvoiceRequest, ...grpc.CallOption) (*PayInvoiceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PayInvoiceRequest, ...grpc.CallOption) *PayInvoiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PayInvoiceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PayInvoiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningClient_PayInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayInvoice'
type MockLightningClient_PayInvoice_Call struct {
	*mock.Call
}

// PayInvoice is a helper method to define mock.On call
//   - ctx context.Context
//   - in *PayInvoiceRequest
//   - opts ...grpc.CallOption
func (_e *MockLightningClient_Expecter) PayInvoice(ctx interface{}, in interface{}, opts ...interface{}) *MockLightningClient_PayInvoice_Call {
	return &MockLightningClient_PayInvoice_Call{Call: _e.mock.On("PayInvoice",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLightningClient_PayInvoice_Call) Run(run func(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption)) *MockLightningClient_PayInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*PayInvoiceRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLightningClient_PayInvoice_Call) Return(_a0 *PayInvoiceResponse, _a1 error) *MockLightningClient_PayInvoice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningClient_PayInvoice_Call) RunAndReturn(run func(context.Context, *PayInvoiceRequest, ...grpc.CallOption) (*PayInvoiceResponse, error)) *MockLightningClient_PayInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// PubKey provides a mock function with given fields: ctx, in, opts
func (_m *MockLightningClient) PubKey(ctx context.Context, in *PubKeyRequest, opts ...grpc.CallOption) (*PubKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *PubKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PubKeyRequest, ...grpc.CallOption) (*PubKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PubKeyRequest, ...grpc.CallOption) *PubKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PubKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PubKeyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLightningClient_PubKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubKey'
type MockLightningClient_PubKey_Call struct {
	*mock.Call
}

// PubKey is a helper method to define mock.On call
//   - ctx context.Context
//   - in *PubKeyRequest
//   - opts ...grpc.CallOption
func (_e *MockLightningClient_Expecter) PubKey(ctx interface{}, in interface{}, opts ...interface{}) *MockLightningClient_PubKey_Call {
	return &MockLightningClient_PubKey_Call{Call: _e.mock.On("PubKey",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLightningClient_PubKey_Call) Run(run func(ctx context.Context, in *PubKeyRequest, opts ...grpc.CallOption)) *MockLightningClient_PubKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*PubKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLightningClient_PubKey_Call) Return(_a0 *PubKeyResponse, _a1 error) *MockLightningClient_PubKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLightningClient_PubKey_Call) RunAndReturn(run func(context.Context, *PubKeyRequest, ...grpc.CallOption) (*PubKeyResponse, error)) *MockLightningClient_PubKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLightningClient creates a new instance of MockLightningClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLightningClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLightningClient {
	mock := &MockLightningClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
