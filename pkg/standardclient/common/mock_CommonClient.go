// Code generated by mockery v2.34.2. DO NOT EDIT.

package common

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockCommonClient is an autogenerated mock type for the CommonClient type
type MockCommonClient struct {
	mock.Mock
}

type MockCommonClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommonClient) EXPECT() *MockCommonClient_Expecter {
	return &MockCommonClient_Expecter{mock: &_m.Mock}
}

// NewAddress provides a mock function with given fields: ctx, in, opts
func (_m *MockCommonClient) NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *NewAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NewAddressRequest, ...grpc.CallOption) (*NewAddressResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NewAddressRequest, ...grpc.CallOption) *NewAddressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NewAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NewAddressRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommonClient_NewAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAddress'
type MockCommonClient_NewAddress_Call struct {
	*mock.Call
}

// NewAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - in *NewAddressRequest
//   - opts ...grpc.CallOption
func (_e *MockCommonClient_Expecter) NewAddress(ctx interface{}, in interface{}, opts ...interface{}) *MockCommonClient_NewAddress_Call {
	return &MockCommonClient_NewAddress_Call{Call: _e.mock.On("NewAddress",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommonClient_NewAddress_Call) Run(run func(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption)) *MockCommonClient_NewAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*NewAddressRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommonClient_NewAddress_Call) Return(_a0 *NewAddressResponse, _a1 error) *MockCommonClient_NewAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommonClient_NewAddress_Call) RunAndReturn(run func(context.Context, *NewAddressRequest, ...grpc.CallOption) (*NewAddressResponse, error)) *MockCommonClient_NewAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, in, opts
func (_m *MockCommonClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SendResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SendRequest, ...grpc.CallOption) (*SendResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SendRequest, ...grpc.CallOption) *SendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SendResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SendRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommonClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockCommonClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - in *SendRequest
//   - opts ...grpc.CallOption
func (_e *MockCommonClient_Expecter) Send(ctx interface{}, in interface{}, opts ...interface{}) *MockCommonClient_Send_Call {
	return &MockCommonClient_Send_Call{Call: _e.mock.On("Send",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommonClient_Send_Call) Run(run func(ctx context.Context, in *SendRequest, opts ...grpc.CallOption)) *MockCommonClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SendRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommonClient_Send_Call) Return(_a0 *SendResponse, _a1 error) *MockCommonClient_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommonClient_Send_Call) RunAndReturn(run func(context.Context, *SendRequest, ...grpc.CallOption) (*SendResponse, error)) *MockCommonClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// WalletBalance provides a mock function with given fields: ctx, in, opts
func (_m *MockCommonClient) WalletBalance(ctx context.Context, in *WalletBalanceRequest, opts ...grpc.CallOption) (*WalletBalanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *WalletBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *WalletBalanceRequest, ...grpc.CallOption) (*WalletBalanceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *WalletBalanceRequest, ...grpc.CallOption) *WalletBalanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WalletBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *WalletBalanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommonClient_WalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalletBalance'
type MockCommonClient_WalletBalance_Call struct {
	*mock.Call
}

// WalletBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - in *WalletBalanceRequest
//   - opts ...grpc.CallOption
func (_e *MockCommonClient_Expecter) WalletBalance(ctx interface{}, in interface{}, opts ...interface{}) *MockCommonClient_WalletBalance_Call {
	return &MockCommonClient_WalletBalance_Call{Call: _e.mock.On("WalletBalance",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommonClient_WalletBalance_Call) Run(run func(ctx context.Context, in *WalletBalanceRequest, opts ...grpc.CallOption)) *MockCommonClient_WalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*WalletBalanceRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommonClient_WalletBalance_Call) Return(_a0 *WalletBalanceResponse, _a1 error) *MockCommonClient_WalletBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommonClient_WalletBalance_Call) RunAndReturn(run func(context.Context, *WalletBalanceRequest, ...grpc.CallOption) (*WalletBalanceResponse, error)) *MockCommonClient_WalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommonClient creates a new instance of MockCommonClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommonClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommonClient {
	mock := &MockCommonClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
